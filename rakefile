ENV['GO_PIPELINE_NAME'] ||= 'GDAL'
ENV['GO_PIPELINE_COUNTER'] ||= '64'
ENV['GO_STAGE_NAME'] ||= 'Build'
ENV['GO_STAGE_COUNTER'] ||= '1'
ENV['GO_JOB_NAME'] ||= 'BuildAndPackage'
ENV['Verbose'] ||= '3'

require 'symenarequire'
require_version 'symenabuild', '~>3.3', '>=3.3.2'

task :clean_directory do
  Symenabuild.prepare_working_directory ".."
end

task :prepare_build_environment => :clean_directory do
  boost_version = $run.dependencies.nuget_packages['boost-headers-symena']
  
  version_parts = boost_version.split '.'
  
  boost_major_minor = version_parts[0]+'_'+version_parts[1]
  
  ENV['GDAL_LINK_BOOST_VERSION'] = boost_version
  ENV['GDAL_LINK_BOOST_MAJOR_MINOR'] = boost_major_minor
 
  FileUtils.copy_entry 'gdal', 'gdal_32_debug'
  FileUtils.copy_entry 'gdal', 'gdal_32_release'
  FileUtils.copy_entry 'gdal', 'gdal_64_debug'
  FileUtils.copy_entry 'gdal', 'gdal_64_release'
end

task :build_32_debug => :prepare_build_environment do
  Symenabuild.launch_checked("build_32_debug.bat")
end

task :build_32_release => :prepare_build_environment do
  Symenabuild.launch_checked("build_32_release.bat")
end

task :build_64_debug => :prepare_build_environment do
  Symenabuild.launch_checked("build_64_debug.bat")
end

task :build_64_release => :prepare_build_environment do
  Symenabuild.launch_checked("build_64_release.bat")
end

multitask :build => [:build_32_debug, :build_32_release, :build_64_debug, :build_64_release]

task :process_executables => :build do
  Symenabuild.post_process_executables(*Dir.glob('build*/bin/gdal200.dll'))
end

task :build_package => :process_executables do #for testing we require a built (but not published) nuget package
  Symenabuild.launch_checked("PowerShell.exe -Command Write-NuGetPackage -Verbose gdal.autopkg")
end

task :test_package => :build_package do
  id , version = Symenabuild.get_package_id_and_version(File.read('gdal.autopkg'))
  versionmapping = {id => version, id+'.redist' => version}
  package_location = Dir.pwd
  
  Dir.chdir "gdal_64_release/frmts/aircom_map" do
    Symenabuild.build('AircomMap.sln', versionmapping, package_location)
    Symenabuild.run_test('x64\Release\UnitTests.exe')
    Symenabuild.launch_checked('x64\Release\IntegrationTests.exe "..\..\..\TestData" test')
  end
end

task :publish_package => :test_package do #here we build again, and then publish
  Symenabuild.create_nuget_package('gdal.autopkg')
end

task :upload_artifacts => :test_package do
  result_artifact('buildd32/bin/gdal200.dll', 'x86/debug/gdal200.dll')
  result_artifact('buildo32/bin/gdal200.dll', 'x86/gdal200.dll')
  result_artifact('buildd64/bin/gdal200.dll', 'debug/gdal200.dll')
  result_artifact('buildo64/bin/gdal200.dll', 'gdal200.dll')
  
  result_artifact('buildd32/lib/gdal_i.lib',  'x86/debug/gdal_i.lib')
  result_artifact('buildo32/lib/gdal_i.lib',  'x86/gdal_i.lib')
  result_artifact('buildd64/lib/gdal_i.lib',  'debug/gdal_i.lib')
  result_artifact('buildo64/lib/gdal_i.lib',  'gdal_i.lib')
  
  result_artifacts('gdal/data/*','gdal/')
end

task :default => [:publish_package, :upload_artifacts]